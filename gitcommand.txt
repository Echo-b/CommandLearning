关联一个远程仓库命令为：git remote add origin git@github.com:username/repo.git
第一次远程提交命令为：git push -u origin master
后续提交的方式：git push origin master
查看分支：git branch
创建并切换分支：git checkout -b <branch name> git switch -c <branch name>
切换分支：git switch <branch name> git checkout <branch name>
合并分支：git merge <branch name>
删除分支：git branch -d <branch name>
撤销:git checkout -- <file name>
拉取一个远程仓库到本地：git clone git@github.com:username/repo.git <destination>
放入缓存：git add <file name>
提交：git commit -m "the record"
本地删除：rm <file name>
确定在仓库中删除：git rm <file name>
查看仓库转态：git status
初始化一个仓库：git init
创建密钥:ssh-keygen -t rsa -C "youremail"
合并分支并创建一个新的提交：git merge --no-ff -m "commit record" <branch name>
手动解决冲突之后就可以提交了
查看提交的分支图：git log --graph
查看提交的分支图：git log --graph --pretty=oneline --abbrev-commit
暂存分支：git stash
恢复分支：git stash apply
删除stash内容：git stash drop
恢复加删除stash内容：git stash pop
查看stash内同:git stash list
可以多次stash,恢复的时先用git stash list查看确定要恢复的stash,指定恢复的stash即可,如：git stash apply stash@{0}
删除为合并的分支：git branch -D <branch name>
查看远程仓库：git remote/git remote -v
从本地推送分支：git push origin <branch name> ,如果推送失败，先用git pull抓取远程的提交
从本地创建和远程仓库对应的分支：git checkout -b branch-name origin/branch-name,本地分支和远程分支最好名称相同
建立本地分支和远程分支的关联：git branch --set-upstream branch-name origin/branch-name
从远程抓取分支：git pull，如果有冲突先解决冲突

多人合作开发的一般模式：
1. 尝试用git push origin <branch-name>推送自己的修改
2. 推送失败，用git pull试图合并
3. 合并有冲突，则解决冲突，并在本地提交
4. 推送 git push origin <branch-name>
5. 如果给git pull 提示no tracking information ,则说明本地分支与远程分支的链接关系没有创建,先用git branch --set-upstream-to <branch-name> origin/<branch-name>
把本地未push的分叉提交历史整理成直线：git rebase
查看commit id：git log --pretty=oneline --abbrev-commit
新建标签：git tag <tag-name/commit id>
查看指定标签信息：git show <tag-name>
指定标签信息：git tag -a <tag-name> -m content... commit-id/null
推送一个本地标签：git push origin <tag-name>
推送全部未推送过的本地标签：git push origin --tags
删除本地标签：git tag -d <tag-name>
删除一个远程标签：git push origin :ref/tags/<tag-name>
撤销对暂存区文件的修改:git reset HEAD file
修改操作名称:git config --global alias.<new-name> <old-name>
