# 每条规则的语法格式:
target1,target2...: depend1, depend2, ...
	command
	......
	......
每条规则由三个部分组成分别是目标(target), 依赖(depend) 和命令(command)。

命令(command): 当前这条规则的动作，一般情况下这个动作就是一个 shell 命令
每个命令前必须有一个Tab缩进并且独占占一行。

依赖(depend): 规则所必需的依赖条件.
例如：生成可执行文件的目标文件（*.o）可以作为依赖使用
如果规则的命令中不需要任何依赖，那么规则的依赖可以为空
当前规则中的依赖可以是其他规则中的某个目标，这样就形成了规则之间的嵌套
依赖可以根据要执行的命令的实际需求，指定很多个

目标(target)： 规则中的目标
通过执行规则中的命令，可以生成一个和目标同名的文件
规则中可以有多个命令，因此可以通过这多条命令来生成多个目标，所有目标也可以有很多个
通过执行规则中的命令，可以只执行一个动作，不生成任何文件，这样的目标被称为伪目标

常见的自动变量
$*	表示目标文件的名称，不包含目标文件的扩展名
$+	表示所有的依赖文件，这些依赖文件之间以空格分开，按照出现的先后为顺序，其中可能 包含重复的依赖文件
$<	表示依赖项中第一个依赖文件的名称
$?	依赖项中，所有比目标文件时间戳晚的依赖文件，依赖文件之间以空格分开
$@	表示目标文件的名称，包含文件扩展名
$^	依赖项中，所有不重复的依赖文件，这些文件之间以空格分开

变量：直接命名即可
取变量的值  $(varible name)

函数
1.wildcard：获取指定目录下指定类型的文件名，其返回值是以空格分割的、指定目录下的所有符合条件的文件名列表。函数原型如下：
# 该函数的参数只有一个, 但是这个参数可以分成若干个部分, 通过空格间隔
$(wildcard pattern...)
参数:指定某个目录, 搜索这个路径下指定类型的文件，比如： *.c,可以指定多个目录，每个路径之间用空格间隔
返回值：若干个文件之间的文件列表，文件名之间由空格间隔
例如：src=$(wildcard *.c ./path/*.txt)
表示获取当前目录所有.c文件和path目录下的所有.txt文件。


